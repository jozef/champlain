%%
headers
#include <Python.h>
#include <pygobject.h>
#include <champlain/champlain.h>
#include <clutter/clutter.h>
#include "pychamplain.h"

%%
modulename champlain
%%
import gobject.GObject as PyGObject_Type
import gobject.GObject as PyGInitiallyUnowned_Type
import clutter.Actor as PyClutterActor_Type
import clutter.Group as PyClutterGroup_Type
import clutter.Color as PyClutterColor_Type
%%
ignore-glob
        *_get_type
%%
ignore
	champlain_zoom_level_set_actor
	// deprecated methods
	champlain_cache_get_default
	champlain_map_source_factory_get_default
	champlain_map_source_factory_get_list
	champlain_network_map_source_fill_tile

%%
override champlain_map_source_factory_dup_list kwargs
static PyObject *
_wrap_champlain_map_source_factory_dup_list(PyGObject *self) {
    GSList *iter, *list;
    PyObject *ret;
    PyObject *pydesc;

    list = champlain_map_source_factory_dup_list(
        CHAMPLAIN_MAP_SOURCE_FACTORY(self->obj));
	
    ret = PyList_New(0);    
    for(iter = list; iter != NULL; iter = iter->next) {
        ChamplainMapSourceDesc *desc = (ChamplainMapSourceDesc *) iter->data;
        pydesc = pyg_boxed_new(CHAMPLAIN_TYPE_MAP_SOURCE_DESC, desc, TRUE, TRUE);
        PyList_Append(ret, pydesc);
    }

    g_slist_free(list);
    g_slist_free(iter);
    return ret;
}
%%
override champlain_map_source_factory_register kwargs
static PyObject *_pycallback = NULL;

static ChamplainMapSource *
champlain_map_source_constructor(ChamplainMapSourceDesc *desc, gpointer data)
{
    PyObject *pymap_source = NULL;
    PyObject *pydesc;

    pydesc = pyg_boxed_new(CHAMPLAIN_TYPE_MAP_SOURCE_DESC, desc, TRUE, TRUE);
    pymap_source = PyObject_CallFunction(_pycallback, "(OO)", pydesc, data);
    if (pymap_source == NULL){
        if (PyErr_Occurred())
            PyErr_Print();
        return NULL;
    }
    return CHAMPLAIN_MAP_SOURCE(((PyGObject *)pymap_source)->obj);
}

static PyObject *
_wrap_champlain_map_source_factory_register(PyGObject *self, PyObject *args, 
    PyObject *kargs) 
{
    ChamplainMapSourceDesc *desc;
    PyObject *pydesc = NULL, *pyconstructor = NULL, *pyuser_data = NULL;
    static char *kwlist[] = {"desc", "constructor", "user_data", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kargs, "OO|O:ChamplainMapSourceFactory.register", 
        kwlist, &pydesc, &pyconstructor, &pyuser_data))
        return NULL;
   
    if (pyg_boxed_check(pydesc, CHAMPLAIN_TYPE_MAP_SOURCE_DESC))
        desc = pyg_boxed_get(pydesc, ChamplainMapSourceDesc);
    else {
        PyErr_SetString(PyExc_TypeError, "desc must be a MapSourceDesc");
        return NULL;
    }

    if (!pyconstructor || !PyCallable_Check(pyconstructor)) {
        PyErr_SetString(PyExc_TypeError, "constructor parameter must be callable");
        return NULL;
    }
    Py_XINCREF(pyconstructor);  /* Add a reference to new callback */
    Py_XDECREF(_pycallback); /* Dispose of previous callback */
    _pycallback = pyconstructor;
    return PyBool_FromLong(champlain_map_source_factory_register(
        CHAMPLAIN_MAP_SOURCE_FACTORY(self->obj), desc, 
        champlain_map_source_constructor, (gpointer)pyuser_data));
}
%%
override champlain_polygon_get_points kwargs
static PyObject *
_wrap_champlain_polygon_get_points(PyGObject *self, PyObject *args) 
{
    GList *iter, *list = champlain_polygon_get_points(CHAMPLAIN_POLYGON(self->obj));
    PyObject *ret = PyList_New(0);
    PyObject *pypoint;

	for(iter = list; iter != NULL; iter = iter->next) {
		ChamplainPoint *point = (ChamplainPoint *) iter->data;
        pypoint = pyg_boxed_new(CHAMPLAIN_TYPE_POINT, point, TRUE, TRUE);
		PyList_Append(ret, pypoint);
		Py_DECREF(pypoint);
    }
    return ret;
}
%%
override champlain_view_get_coords_from_event kwargs
static PyObject *
_wrap_champlain_view_get_coords_from_event(PyGObject *self, PyObject *args, 
    PyObject *kargs) 
{
    static char *kwlist[] = {"event", NULL};
    gdouble lat, lon;
    PyObject *pyevent;
    ClutterEvent *event;

    if (!PyArg_ParseTupleAndKeywords(args, kargs, 
        "O:ChamplainView.get_coords_from_event", kwlist, &pyevent))
        return NULL;

    if (pyg_boxed_check(pyevent, CLUTTER_TYPE_EVENT))
        event = pyg_boxed_get(pyevent, ClutterEvent);
    else {
        PyErr_SetString(PyExc_TypeError, "event must be a ClutterEvent");
        return NULL;
    }
 
    champlain_view_get_coords_from_event(CHAMPLAIN_VIEW(self->obj), event, &lat, 
        &lon);
    return Py_BuildValue("(dd)", lat, lon);
}
%%
override champlain_view_set_size kwargs
static PyObject *
_wrap_champlain_view_set_size(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "width", "height", NULL };
    PyObject *py_width = NULL, *py_height = NULL;
    guint width = 0, height = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:ChamplainView.set_size", kwlist, &py_width, &py_height))
        return NULL;
    if (py_width) {
        if (PyLong_Check(py_width))
            width = PyLong_AsUnsignedLong(py_width);
        else if (PyInt_Check(py_width))
            width = PyInt_AsLong(py_width);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'width' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    if (py_height) {
        if (PyLong_Check(py_height))
            height = PyLong_AsUnsignedLong(py_height);
        else if (PyInt_Check(py_height))
            height = PyInt_AsLong(py_height);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'height' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }

    clutter_actor_set_size(CLUTTER_ACTOR(self->obj), width, height);

    Py_INCREF(Py_None);
    return Py_None;
}
%%
override champlain_view_get_coords_at kwargs
static PyObject *
_wrap_champlain_view_get_coords_at(PyGObject *self, PyObject *args) 
{
    guint x, y;
    gdouble lat, lon;

    if (!PyArg_ParseTuple(args, "ii:ChamplainView.get_coords_at", &x, &y))
        return NULL;

    champlain_view_get_coords_at(CHAMPLAIN_VIEW(self->obj), x, y, &lat, &lon);
    return Py_BuildValue("(dd)", lat, lon);
}
%%
override champlain_view_ensure_markers_visible kwargs
static PyObject *
_wrap_champlain_view_ensure_markers_visible(PyGObject *self, PyObject *args) 
{
    PyObject *pymarkers, *pyanimate=0;
    gboolean animate = 1; 
    long i = 0;
    ChamplainBaseMarker **markers = NULL;

    if (!PyArg_ParseTuple(args, "O|O:ChamplainView.ensure_markers_visible", 
        &pymarkers, &pyanimate)){
        return NULL;
    }

    if (!PySequence_Check(pymarkers)){
        PyErr_SetString(PyExc_TypeError, 
            "must be called with a list of markers as first argument");
        return NULL;
    }

    if (pyanimate){
        if (!PyObject_IsTrue(pyanimate))
            animate = 0;
    }

    markers = g_new0(ChamplainBaseMarker*, PyList_Size(pymarkers)+2);
    for (i=0; i < PyList_Size(pymarkers); i++){
        ChamplainBaseMarker *marker = pyg_boxed_get(PyList_GetItem(pymarkers, i),
             ChamplainBaseMarker);
        markers[i] = marker;
    }

    champlain_view_ensure_markers_visible(CHAMPLAIN_VIEW(self->obj), markers, animate);
    g_free(markers);

    Py_INCREF(Py_None);
    return Py_None;
}
%%
override champlain_tile_set_modified_time kwargs
static PyObject *
_wrap_champlain_tile_set_modified_time(PyGObject *self, PyObject *args,     
    PyObject *kwargs) 
{
    static char *kwlist[] = {"modified_time", NULL};
    double pymodified_time = 0.0;
    GTimeVal modified_time = {0,};

    if (!PyArg_ParseTupleAndKeywords(
            args, kwargs, "d:ChamplainTile.set_modified_time",
            kwlist, &pymodified_time))
        return NULL;

    if (pymodified_time < 0.0) {
        PyErr_SetString(PyExc_ValueError, "modified_time must be >= 0.0");
        return NULL;
    }

    if (pymodified_time > 0.0) {
        modified_time.tv_sec = (glong) pymodified_time;
        modified_time.tv_usec = (glong)((pymodified_time - modified_time.tv_sec)
                                    * G_USEC_PER_SEC);
    } 
    champlain_tile_set_modified_time(CHAMPLAIN_TILE(self->obj), &modified_time);

    Py_INCREF(Py_None);
    return Py_None;
}
%%
override champlain_tile_get_modified_time kwargs
static PyObject *
_wrap_champlain_tile_get_modified_time(PyGObject *self, PyObject *args) 
{
    const GTimeVal *modified_time = NULL;

    modified_time = champlain_tile_get_modified_time(CHAMPLAIN_TILE(self->obj));
    if (modified_time == NULL){
        Py_INCREF(Py_None);
        return Py_None;
    }

    return PyFloat_FromDouble((double)modified_time->tv_sec + \
        (double)modified_time->tv_usec * 0.000001);
}
%%
override-attr ChamplainMapSourceDesc.id
static int
_wrap_champlain_map_source_desc__set_id (PyGBoxed *self, PyObject *value, 
    void *closure)
{
    gchar *val;

	val = PyString_AsString (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ChamplainMapSourceDesc)->id = val;
	return 0;
}
static PyObject *
_wrap_champlain_map_source_desc__get_id (PyGBoxed *self, void *closure)
{
    gchar *id = pyg_boxed_get(self, ChamplainMapSourceDesc)->id;
    return PyString_FromString (id);
}
%%
override-attr ChamplainMapSourceDesc.name
static int
_wrap_champlain_map_source_desc__set_name (PyGBoxed *self, PyObject *value, 
    void *closure)
{
    gchar *val;

	val = PyString_AsString (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ChamplainMapSourceDesc)->name = val;
	return 0;
}
static PyObject *
_wrap_champlain_map_source_desc__get_name (PyGBoxed *self, void *closure)
{
    gchar *name = pyg_boxed_get(self, ChamplainMapSourceDesc)->name;
    return PyString_FromString (name);
}
%%
override-attr ChamplainMapSourceDesc.license
static int
_wrap_champlain_map_source_desc__set_license (PyGBoxed *self, PyObject *value, 
    void *closure)
{
    gchar *val;

	val = PyString_AsString (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ChamplainMapSourceDesc)->license = val;
	return 0;
}
static PyObject *
_wrap_champlain_map_source_desc__get_license (PyGBoxed *self, void *closure)
{
    gchar *license = pyg_boxed_get(self, ChamplainMapSourceDesc)->license;
    return PyString_FromString (license);
}
%%
override-attr ChamplainMapSourceDesc.license_uri
static int
_wrap_champlain_map_source_desc__set_license_uri (PyGBoxed *self, PyObject *value, 
    void *closure)
{
    gchar *val;

	val = PyString_AsString (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ChamplainMapSourceDesc)->license_uri = val;
	return 0;
}
static PyObject *
_wrap_champlain_map_source_desc__get_license_uri (PyGBoxed *self, void *closure)
{
    gchar *license_uri = pyg_boxed_get(self, ChamplainMapSourceDesc)->license_uri;
    return PyString_FromString (license_uri);
}
%%
override-attr ChamplainMapSourceDesc.uri_format
static int
_wrap_champlain_map_source_desc__set_uri_format (PyGBoxed *self, PyObject *value, 
    void *closure)
{
    gchar *val;

	val = PyString_AsString (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ChamplainMapSourceDesc)->uri_format = val;
	return 0;
}
static PyObject *
_wrap_champlain_map_source_desc__get_uri_format (PyGBoxed *self, void *closure)
{
    gchar *uri_format = pyg_boxed_get(self, ChamplainMapSourceDesc)->uri_format;
    return PyString_FromString (uri_format);
}
%%
override-attr ChamplainMapSourceDesc.max_zoom_level
static int
_wrap_champlain_map_source_desc__set_max_zoom_level (PyGBoxed *self, PyObject *value, 
    void *closure)
{
    glong val;

	val = PyLong_AsLong (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ChamplainMapSourceDesc)->max_zoom_level = val;
	return 0;
}
%%
override-attr ChamplainMapSourceDesc.min_zoom_level
static int
_wrap_champlain_map_source_desc__set_min_zoom_level (PyGBoxed *self, PyObject *value, 
    void *closure)
{
    glong val;

	val = PyLong_AsLong (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ChamplainMapSourceDesc)->min_zoom_level = val;
	return 0;
}
%%
override-attr ChamplainMapSourceDesc.projection
static int
_wrap_champlain_map_source_desc__set_projection (PyGBoxed *self, PyObject *value, 
    void *closure)
{
    ChamplainMapProjection val;

    if (pyg_enum_get_value(CHAMPLAIN_TYPE_MAP_PROJECTION, value, (gpointer)&val) != 0)
        return -1;

	pyg_boxed_get (self, ChamplainMapSourceDesc)->projection = val;
	return 0;
}
%%
override champlain_map_source_desc_new kwargs
static int
_wrap_champlain_map_source_desc_new(PyGBoxed *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = {"id", "name", "license", "license_uri", 
        "min_zoom_level", "max_zoom_level", "projection", "uri_format", NULL };
    ChamplainMapSourceDesc *desc;
    PyObject *py_projection;

    desc = champlain_map_source_desc_new();

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, 
            "ssssiiOs:ChamplainMapSourceDesc.__init__", kwlist,
            &desc->id, &desc->name, &desc->license, &desc->license_uri, 
            &desc->min_zoom_level, &desc->max_zoom_level, &py_projection, 
            &desc->uri_format)){
        return -1;
    }

    if (pyg_enum_get_value(CHAMPLAIN_TYPE_MAP_PROJECTION, py_projection, 
            (gpointer)&desc->projection) != 0)
        return -1;

    self->boxed = g_boxed_copy(CHAMPLAIN_TYPE_MAP_SOURCE_DESC, desc);
    self->free_on_dealloc = TRUE;
    self->gtype = CHAMPLAIN_TYPE_MAP_SOURCE_DESC;

    if (!self->boxed) {
        PyErr_SetString(PyExc_RuntimeError, 
            "could not create ChamplainMapSourceDesc object");
        return -1;
    }
    return 0;
}
%%
override-attr ChamplainPoint.lat
static int
_wrap_champlain_point__set_lat (PyGBoxed *self, PyObject *value, 
    void *closure)
{
    gdouble val;

    val = PyFloat_AsDouble(value);
    if (PyErr_Occurred())
        return -1;

    pyg_boxed_get(self, ChamplainPoint)->lat = val;
    return 0;
}
%%
override-attr ChamplainPoint.lon
static int
_wrap_champlain_point__set_lon(PyGBoxed *self, PyObject *value, 
    void *closure)
{
    gdouble val;

    val = PyFloat_AsDouble(value);
    if (PyErr_Occurred())
        return -1;

    pyg_boxed_get(self, ChamplainPoint)->lon = val;
    return 0;
}

%%
override champlain_selection_layer_get_selected_markers kwargs
static PyObject *
_wrap_champlain_selection_layer_get_selected_markers(PyGObject *self) {
    const GList *iter, *list;
    PyObject *ret;

    list = champlain_selection_layer_get_selected_markers(
        CHAMPLAIN_SELECTION_LAYER(self->obj));
       
    if ((ret = PyList_New(0)) == NULL)
        return NULL;

    for(iter = list; iter != NULL; iter = iter->next) {
        ChamplainMarker *marker = (ChamplainMarker *) iter->data;
        PyObject *py_marker = NULL;

        py_marker = pygobject_new((GObject *) marker);
        if (!py_marker){
            Py_DECREF(ret);
            return NULL;
        }
        PyList_Append(ret, py_marker);
        Py_DECREF(py_marker);
    }
    return ret;
}
%%
override champlain_marker_new_with_text kwargs
static PyObject *
_wrap_champlain_marker_new_with_text(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "text", "font", "text_color", "marker_color", NULL };
    char *text, *font = NULL;
    ClutterColor *text_color = NULL, *marker_color = NULL;
    ClutterActor *ret;
    PyObject *py_text_color = NULL, *py_marker_color = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s|sOO:marker_new_with_text", 
            kwlist, &text, &font, &py_text_color, &py_marker_color))
        return NULL;
    if (py_text_color!=NULL){
        if (pyg_boxed_check(py_text_color, CLUTTER_TYPE_COLOR))
            text_color = pyg_boxed_get(py_text_color, ClutterColor);
        else {
            PyErr_SetString(PyExc_TypeError, "text_color should be a ClutterColor");
            return NULL;
        }
    }
    if (py_marker_color!=NULL){
        if (pyg_boxed_check(py_marker_color, CLUTTER_TYPE_COLOR))
            marker_color = pyg_boxed_get(py_marker_color, ClutterColor);
        else {
            PyErr_SetString(PyExc_TypeError, "marker_color should be a ClutterColor");
            return NULL;
        }
    }
    
    ret = champlain_marker_new_with_text(text, font, text_color, marker_color);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}
%%
override-slot ChamplainPolygon.tp_dealloc
static void
_wrap_champlain_polygon_tp_dealloc (PyObject *self)
{
    self->ob_type->tp_free((PyObject*)self);
}
